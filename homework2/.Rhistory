fit_ridge_regression <- ridge_regression(form, taxi, lambda = 0.1)
fit_rr <- lm.ridge(form, taxi, lambda = 0.1)
check_tolerance <- fit_ridge_regression$coefficients * 0.05
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
data(iris)
form <- Sepal.Length ~ .
fit_ridge_regression <- ridge_regression(form, iris, lambda = 0.1)
fit_rr <- lm.ridge(form, iris, lambda = 0.1)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.01)
check_tolerance <- fit_ridge_regression$coefficients * 0.05
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
data(iris)
form <- Sepal.Length ~ .
fit_ridge_regression <- ridge_regression(form, iris, lambda = 0.1)
fit_rr <- lm.ridge(form, iris, lambda = 0.1)
check_tolerance <- fit_ridge_regression$coefficients * 0.05
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
check_tolerance <- fit_ridge_regression$coefficients * 0.1
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
check_tolerance <- fit_ridge_regression$coefficients * 0.2
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.2)
devtools::test()
devtools::test()
devtools::test()
ridge_regression <- function(form, data, lambda = 0) {
rownames(data) <- NULL
X <- model.matrix(form, data)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
model <- list()
model$coefficients <- ret
return(model)
}
devtools::test()
fit_ridge_regression <- ridge_regression(form, taxi, lambda = 0.1)
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
fit_ridge_regression <- ridge_regression(form, taxi, lambda = 0.1)
devtools::test()
ridge_regression <- function(form, data, lambda = 0) {
rownames(data) <- NULL
X <- model.matrix(form, data)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
model <- list()
model$coefficients <- ret
return(model)
}
fit_rr <- lm.ridge(form, taxi, lambda = 0.1)
library(testthat)
devtools::test()
form <- Sepal.Length ~ .
ridge_regression(form, iris)
fit_rr <- lm.ridge(form, iris, lambda = 0.1)
coef(fit_rr)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.01)
fit_ridge_regression <- ridge_regression(form, iris, lambda = 0.1)
fit_rr <- lm.ridge(form, iris, lambda = 0.1)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.01)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.1)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.15)
ridge_regression(form, iris, lambda = 0.1)
form <- Sepal.Length ~ .
lm.ridge(form, iris, lambda = 0.1)
ridge_regression(form, iris, lambda = 0.1)
fit_ridge_regression <- ridge_regression(form, iris, lambda = 0.01)
fit_rr <- lm.ridge(form, iris, lambda = 0.1)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.15)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.1)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.05)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.01)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.05)
devtools::test()
library(MASS)
context("Test the output of homework 2 question 2.")
test_that("You ridge_regression() function works in taxi dataset.", {
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
fit_ridge_regression <- ridge_regression(form, taxi, lambda = 0.1)
fit_rr <- lm.ridge(form, taxi, lambda = 0.1)
check_tolerance <- fit_ridge_regression$coefficients * 0.05
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
})
test_that("You ridge_regression() function works with iris dataset", {
data(iris)
form <- Sepal.Length ~ .
fit_ridge_regression <- ridge_regression(form, iris, lambda = 0.01)
fit_rr <- lm.ridge(form, iris, lambda = 0.01)
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = 0.05)
})
#' @title Fit Ridge Regression
#'
#' @description Fit a ridge regression model based on the provided formula, data and lambda.
#'
#' @param formula The formula for linear model. Example: y ~ x.
#' @param data The input dataset.
#' @param lambda regulation parameter, the larger the lambda the more penalization on the coefficients, default = 0
#' @author Michael Kane & Tong Wei
#' @return The result model which contains the coefficients.
#' @examples
#' fit_ridge <- ridge_regression(Sepal.Length ~ ., iris)
#' fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda = 0.01)
ÃŽ
ridge_regression <- function(form, data, lambda = 0) {
rownames(data) <- NULL
X <- model.matrix(form, data)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
model <- list()
model$coefficients <- ret
return(model)
}
devtools::test()
ridge_regression_optlambda <- function(form, data, lambda_seq = seq(0, 200*2, length.out = 500)) {
rownames(data) <- NULL
data <- data[sample(nrow(data)),]
X <- model.matrix(form, data)
fivefolds <- cut(seq(1,nrow(data)),breaks=5,labels=FALSE)
k <- length(lambda_seq)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
mse <- NULL
for (i in 1:k){
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(beta_hat[j, ]))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
ridge_beta[i,] <- colMeans(beta_hat)
mse[i] <- mean(test_mse)
}
#print(ridge_beta)
#y_hat <- tcrossprod(X, ridge_beta)
#mse <- apply((y_hat - Y)^2, 2, mean)
lambda <- lambda_seq[which.min(mse)]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
model <- list()
model$coefficients <- ret
model$optlambda <- lambda
return(model)
}
form <- Sepal.Length ~ .
ridge_regression_optlambda(form, iris)
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
Y <- matrix(as.matrix(train[y_name]), ncol = 1)
y_name <- all.vars(form)[1]
Y <- matrix(as.matrix(train[y_name]), ncol = 1)
ridge_regression_optlambda(form, iris)
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
y_name <- all.vars(form)[1]
Y <- matrix(as.matrix(train[y_name]), ncol = 1)
data <- iris
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
y_name <- all.vars(form)[1]
Y <- matrix(as.matrix(train[y_name]), ncol = 1)
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
rownames(data) <- NULL
data <- data[sample(nrow(data)),]
X <- model.matrix(form, data)
fivefolds <- cut(seq(1,nrow(data)),breaks=5,labels=FALSE)
k <- length(lambda_seq)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
mse <- NULL
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
y_name <- all.vars(form)[1]
Y <- matrix(as.matrix(train[y_name]), ncol = 1)
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(beta_hat[j, ]))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
ridge_beta[i,] <- colMeans(beta_hat)
mse[i] <- mean(test_mse)
ridge_regression_optlambda(form, iris)
ridge_regression_optlambda(form, iris)
X <- model.matrix(form, data)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
#y_hat <- tcrossprod(X, ridge_beta)
#mse <- apply((y_hat - Y)^2, 2, mean)
lambda <- lambda_seq[which.min(mse)]
test_mse[j] <- mean((Y_hat - vali_Y)^2)
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(beta_hat[j, ]))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
ridge_regression_optlambda(form, iris)
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
ridge_regression_optlambda(form, taxi)
dataset <- matrix(runif(200 * 50, 1, 100), nrow = 200 )
X <- model.matrix(form, taxi)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
fit_rr <- ridgereg.cv(Y, X, K = 5, seq(0, 200*2, length.out = 500) )
install.packages('MXM')
library(MXM)
fit_rr <- ridgereg.cv(Y, X, K = 5, seq(0, 200*2, length.out = 500) )
X <- model.matrix(form, taxi)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
fit_rr <- ridgereg.cv(Y, X, K = 5, seq(0, 200*2, length.out = 500) )
X <- model.matrix(duration ~ hour + weekday + lat_dist + lon_dist + duration, taxi)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
fit_rr <- ridgereg.cv(Y, X, K = 5, seq(0, 200*2, length.out = 500) )
set.seed(100)
n <- 1000; p <- 25
beta <- c(1, rep(0, p - 1))
X <- matrix(rnorm(n * p), ncol = p)
svals <- svd(t(X)%*%X)$d
max(svals) / min(svals)
casl_ols_svd  <- function(X, y){
svd_output <- svd(X)
r <- sum(svd_output$d > .Machine$double.eps)
U <- svd_output$u[, 1:r]
V <- svd_output$v[, 1:r]
beta <- V %*% (t(U) %*% y / svd_output$d[1:r])
return(beta)
}
N <- 1e4
l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- casl_ols_svd(X, y)
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
#using the ridge regression
X1 <- t(X)%*%X + 0.5*diag(25)
svals1 <- svd(X1)$d
max(svals1) / min(svals1)
N <- 1e4
l2_errors1 <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve( crossprod(X) + diag(rep(0.5, ncol(X))) ) %*% t(X) %*% y
l2_errors1[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors1)
alpha <- 0.001
X[,1] <- X[,1] * alpha + X[,2] * (1 - alpha)
svals <- svd(t(X)%*%X)$d
max(svals) / min(svals)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve(crossprod(X), crossprod(X, y))
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
X1 <- t(X)%*%X + 0.5*diag(25)
svals1 <- svd(X1)$d
max(svals1) / min(svals1)
N <- 1e4; l2_errors <- rep(0, N)
for (k in 1:N) {
y <- X %*% beta + rnorm(n)
betahat <- solve( crossprod(X) + diag(rep(0.5, ncol(X))) ) %*% t(X) %*% y
l2_errors[k] <- sqrt(sum((betahat - beta)^2))
}
mean(l2_errors)
seq(0, 200*2, length.out = 500)
#' @title Fit Ridge Regression with optimizing lambda
#'
#' @description Fit a ridge regression model based on the provided formula, data.
#'
#' @param formula The formula for linear model. Example: y ~ x.
#' @param data The input dataset.
#' @param lambda_seq the sequence of the tested regulation parameter, default = seq(0, 200*2, length.out = 500)
#' @author Tong Wei
#' @return The result model which contains the coefficients.
#' @examples
#' fit_ridge <- ridge_regression(Sepal.Length ~ ., iris)
#' fit_ridge <- ridge_regression(Sepal.Length ~ ., iris, lambda_seq = seq(0, 500, length.out = 500))
ridge_regression_optlambda <- function(form, data, lambda_seq = seq(0, 200*2, length.out = 500)) {
rownames(data) <- NULL
data <- data[sample(nrow(data)),]
X <- model.matrix(form, data)
fivefolds <- cut(seq(1,nrow(data)),breaks=5,labels=FALSE)
k <- length(lambda_seq)
ridge_beta <- matrix(NA_real_, nrow = k, ncol = ncol(X))
mse <- NULL
for (i in 1:k){
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
X <- model.matrix(form, train)
Y <- train[[as.character(form)[2]]][as.numeric(rownames(X))]
beta_hat[j, ] <- solve( crossprod(X) + diag(rep(lambda_seq[i], ncol(X))) ) %*% t(X) %*% Y
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(beta_hat[j, ]))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
ridge_beta[i,] <- colMeans(beta_hat)
mse[i] <- mean(test_mse)
}
#print(ridge_beta)
#y_hat <- tcrossprod(X, ridge_beta)
#mse <- apply((y_hat - Y)^2, 2, mean)
lambda <- lambda_seq[which.min(mse)]
X <- model.matrix(form, data)
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
ret <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
model <- list()
model$coefficients <- ret
model$optlambda <- lambda
return(model)
}
form <- Sepal.Length ~ .
ridge_regression_optlambda(form, iris)
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
ridge_regression_optlambda(form, taxi)
devtools::test()
data(iris)
form <- Sepal.Length ~ .
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
fit_ridge_regression <- ridge_regression_optlambda(form, taxi)
#cross validation for lm.ridge
fivefolds <- cut(seq(1,nrow(taxi)),breaks=5,labels=FALSE)
lambda_seq = seq(0, 200*2, length.out = 500)
ridge_beta <- matrix(NA_real_, nrow = length(lambda_seq), ncol = ncol(X))
mse <- NULL
for (i in 1:length(lambda_seq)){
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- data[validation_id, ]
train <- data[-validation_id, ]
fit_rr <- lm.ridge(form, train, lambda = lambda_seq[i])
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
mse[i] <- mean(test_mse)
}
devtools::test()
coef(fit_rr)
tcrossprod(vali_X, coef(fit_rr))
vali_X <- model.matrix(form, validation)
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
devtools::test()
lambda <- lambda_seq[which.min(mse)]
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- taxi[validation_id, ]
train <- taxi[-validation_id, ]
fit_rr <- lm.ridge(form, train, lambda = lambda_seq[i])
vali_X <- model.matrix(form, validation)
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
data(taxi)
taxi <- taxi %>%
mutate(lat_dist = abs(dropoff_latitude - pickup_latitude),
lon_dist = abs(dropoff_longitude - pickup_longitude))
form <- duration ~ hour + weekday + lat_dist + lon_dist
#cross validation for lm.ridge
fivefolds <- cut(seq(1,nrow(taxi)),breaks=5,labels=FALSE)
lambda_seq = seq(0, 200*2, length.out = 500)
ridge_beta <- matrix(NA_real_, nrow = length(lambda_seq), ncol = ncol(X))
mse <- NULL
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- taxi[validation_id, ]
train <- taxi[-validation_id, ]
fit_rr <- lm.ridge(form, train, lambda = lambda_seq[i])
vali_X <- model.matrix(form, validation)
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- taxi[validation_id, ]
train <- taxi[-validation_id, ]
fit_rr <- lm.ridge(form, train, lambda = lambda_seq[i])
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
mse[i] <- mean(test_mse)
for (i in 1:length(lambda_seq)){
beta_hat <- matrix(NA_real_, nrow = 5, ncol = ncol(X))
test_mse <- NULL
for(j in 1:5){
validation_id <- which(fivefolds==j,arr.ind=TRUE)
validation <- taxi[validation_id, ]
train <- taxi[-validation_id, ]
fit_rr <- lm.ridge(form, train, lambda = lambda_seq[i])
vali_X <- model.matrix(form, validation)
vali_Y <- validation[[as.character(form)[2]]][as.numeric(rownames(vali_X))]
Y_hat <- tcrossprod(vali_X, t(coef(fit_rr)))
test_mse[j] <- mean((Y_hat - vali_Y)^2)
}
mse[i] <- mean(test_mse)
}
lambda <- lambda_seq[which.min(mse)]
fit_rr <- lm.ridge(form, taxi, lambda = lambda)
check_tolerance <- fit_ridge_regression$coefficients * 0.05
expect_equivalent(coef(fit_rr), fit_ridge_regression$coefficients,
tolerance = check_tolerance)
devtools::test()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
install.packages("MASS")
install.packages("MASS")
devtools::check()
#'
#' The taxi dataset the to test the ridge regression function
#'
#' @format A data frame with 10000 rows and 14 variables:
#' \describe{
#'   \item{obs_id}{the taxi id}
#'   \item{train_id}{whether is in train or test}
#'   \item{x2}{independent variable}
#'   \item{x2}{independent variable}
#' }
"taxi"
#' @format A data frame with 10000 rows and 14 variables:
#' \describe{
#'   \item{obs_id}{the taxi id}
#'   \item{train_id}{whether is in train or test}
#'   \item{duration}{duration of the trip}
#'   \item{day}{days in number}
#'   \item{hour}{hours in number}
#'   \item{minute}{minute in number}
#'   \item{minute}{minute in number}
#' }
"taxi"
data(taxi)
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
